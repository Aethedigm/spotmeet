{{extends "./layouts/base.jet"}}

{{block browserTitle()}}Matches{{end}}

{{block css()}}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <style id="styleLoading">
        /* styles for the page */
        .container-fluid {
            background-color: #c5ffc5;
            background-position: center center;
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            box-shadow: 2px 2px 2px 1px rgba(147, 147, 147, 0.71);
            border-radius: 20px;
        }
        .message {
            font-size: 1.5em;
            color: white;
            text-align: center;
            position: absolute;
            font-family: 'Fredoka One', cursive;
            top: calc(50% - 100px);
            left: calc(50% - 90px);
        }
        .messageWait {
            font-size: 1.5em;
            color: white;
            text-align: center;
            position: absolute;
            font-family: 'Fredoka One', cursive;
            top: calc(50% - 125px);
            left: calc(50% - 145px);
        }
        .noMatches {
            font-size: 1em;
            color: green;
            text-align: center;
            font-family: 'Fredoka One', cursive;
            position: relative;
            padding: 3%;
        }
        #MatchesContainer{
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;      
        }
        .wheel-frame {
            position: fixed;
            background-color: #FFFFFF;
            left: 0;
            top: 0;
            right: 0;
            bottom: 0;
            z-index: 4;
        }
        .wheel-track {
            height: 100px;
            display: inline-block;
            position: absolute;
            top: calc(50% - 50px);
            left: calc(50% - 5px);
        }
        .wheel-dot {
            height: 12px;
            width: 12px;
            background-color: white;
            border-radius: 100%;
        }
        .wheel-animated {
            animation-name: wheel-animated;
            animation-direction: alternate;
            animation-duration: 1s;
            animation-iteration-count: infinite;
            animation-timing-function: ease-in-out;
        }
        @keyframes wheel-animated {
            from {
                opacity: 0;
            }
            to {
                opacity: 3;
            }
        }
        .messageContainer {
            margin-bottom: 200px;
        }
        body {
            padding-bottom: 50px;
            margin-top: 20px;
            background-color: rgba(255, 255, 255, 1);
        }
        .badge {
            border-radius: 8px;
            padding: 4px 8px;
            text-transform: uppercase;
            font-size: .7142em;
            line-height: 12px;
            background-color: transparent;
            border: 1px solid;
            margin-bottom: 5px;
            border-radius: .875rem;
        }
        .bg-green {
            background-color: #50d38a !important;
            color: #fff;
        }
        .bg-blush {
            background-color: #ff758e !important;
            color: #fff;
        }
        .bg-amber {
            background-color: #FFC107 !important;
            color: #fff;
        }
        .bg-red {
            background-color: #ec3b57 !important;
            color: #fff;
        }
        .bg-blue {
            background-color: #4285F4 !important;
            color: #4285F4;
        }
        .card {
            background: #fff;
            margin-bottom: 30px;
            transition: .5s;
            border: 0;
            border-radius: .1875rem;
            display: inline-block;
            position: relative;
            width: 100%;
            box-shadow: none;
        }
        .list-group {
            display: flex;
            flex-direction: column;
            padding-left: 0;
            margin-bottom: 0;
            border-radius: 20px
        }
        .matchlist .action_bar .delete_all {
            margin-bottom: 0;
            margin-top: 8px
        }
        .matchlist .action_bar .btn,
        .matchlist .action_bar .search {
            margin: 0
        }
        .matchlist .mail_list .list-group-item {
            border: 0;
            padding: 15px;
            margin-bottom: 1px
        }
        .matchlist .mail_list .list-group-item:hover {
            background: #eceeef
        }

        .matchlist .mail_list .list-group-item .media {
            margin: 0;
            width: 100%
        }

        .matchlist .mail_list .list-group-item .controls {
            display: inline-block;
            margin-right: 10px;
            vertical-align: top;
            text-align: center;
            margin-top: 11px
        }
        .matchlist .mail_list .list-group-item .controls .checkbox {
            display: inline-block
        }
        .matchlist .mail_list .list-group-item .controls .checkbox label {
            margin: 0;
            padding: 10px
        }
        .matchlist .mail_list .list-group-item .controls .favourite {
            margin-left: 10px
        }
        .matchlist .mail_list .list-group-item .thumb {
            display: inline-block
        }
        .matchlist .mail_list .list-group-item .thumb img {
            width: 40px
        }
        .matchlist .mail_list .list-group-item .media-heading a {
            color: #555;
            font-weight: normal
        }
        .matchlist .mail_list .list-group-item .media-heading a:hover,
        .matchlist .mail_list .list-group-item .media-heading a:focus {
            text-decoration: none
        }
        .matchlist .mail_list .list-group-item .media-heading time {
            font-size: 13px;
            margin-right: 10px
        }
        .matchlist .mail_list .list-group-item .media-heading .badge {
            margin-bottom: 0;
            border-radius: 50px;
            font-weight: normal
        }
        .matchlist .mail_list .list-group-item .msg {
            margin-bottom: 0px
        }
        .matchlist .mail_list .unread {
            border-left: 2px solid
        }
        .matchlist .mail_list .unread .media-heading a {
            color: #333;
            font-weight: 700
        }
        .matchlist .btn-group {
            box-shadow: none
        }
        .matchlist .bg-gray {
            background: #e6e6e6
        }
        @media only screen and (max-width: 767px) {
            .matchlist .mail_list .list-group-item .controls {
                margin-top: 3px
            }
        }
        .thumb-button {
            border-radius: 50%;
            height: 40px;
            width: 40px;
            margin-right: 5px;
        }
    </style>
{{end}}

{{block pageContent()}}
    <!-- top navbar for app -->
    <div id="topbar"
        style="display:flex; flex-direction:row; justify-content: space-between;"
        class="navbar fixed-top bg-light">
            <!-- logo/link to home/matches page page -->
            <a href="/matches" class="btn">
                <h3 class="font-weight-bold">&nbsp;&nbsp;sp<span class="green-font">o</span>tmeet</h3>
            </a>
            <!-- buttons on right side of navbar -->
            <div class="btn float-right">
                <!-- button to take user to their own profile -->
                <a 
                    href="/users/profile" 
                    style="text-align:right; font-family: 'Fredoka', sans-serif;"
                    class="btn float-right"
                >
                    <i class="fa-solid fa-user nav-icons"></i>
                </a>
                <!-- button to log user out of the app -->
                <a 
                    href="/users/logout" 
                    style="text-align:right; font-family: 'Fredoka', sans-serif;"
                    class="btn float-right"
                >
                    <i class="fa-solid fa-right-from-bracket nav-icons" ></i>
                </a>
            </div>
    </div>

    <!-- Main body of the matches page -->
    <section style="margin-top:2.6em; margin-bottom:3.6em;" class="content matchlist">
            <div class="row clearfix">
                <div class="col-md-12 col-lg-12 col-xl-12">
                    <ul id="matches_container" class="mail_list list-group list-unstyled"></ul>
                </div>
            </div>
    </section>

    <!-- navbar at bottom of app -->
    <div id="footbar" style="" class="navbar fixed-bottom">
        <div class="container">
            <!-- link to messages -->
            <a href="/messages" class="btn rounded-pill float-left w-25 no-outline"><i class="fa-solid fa-message nav-icons"></i></a>
            <!-- link to matches -->
            <a href="#" class="btn w-25 green-font button-active no-outline"><i class="fa-solid fa-user-group nav-icons"></i></a>
            <!-- link to settings -->
            <a href="/settings" class="btn float-right rounded-pill w-25 no-outline"><i class="fa-solid fa-gear nav-icons"></i></a>
        </div>
    </div>

{{end}}

{{block js()}}
<script>

window.onload = function() {
    var locationUpdateNeeded = {{locationUpdateNeeded}};
    var loadingMessage;
    if ({{isFirstLogin}} == true) {
        loadingMessage = "Setting you up.<br>(This may take a minute.)";
        messageClass = "messageWait";
    } else {
        loadingMessage = "Finding matches";
        messageClass = "message";
    }
    showLoadingAnimation(loadingMessage, messageClass);
    getLocationAndMatches(locationUpdateNeeded);
    updateMusicProfile();
    // Make theme dark or light depending on the user's preference
    setTheme("{{ theme }}");
}

// Setting the theme of the page
const setTheme = (theme) => {
    switch (theme) {
        case "light":
            document.body.style.setProperty('background-color', '#fff');
            document.getElementById("topbar").className = "navbar fixed-top bg-light";
            document.getElementById("footbar").className = "navbar fixed-bottom bg-light";
            var collection = document.getElementsByClassName("container-fluid");
            for (let i = 0; i < collection.length; i++) {
                collection[i].style.setProperty('background-color', '#c5ffc5');
                collection[i].style.setProperty('color', 'black');
            }
            collection = document.getElementsByClassName("noMatches");
            for (let i = 0; i < collection.length; i++) {
                collection[i].style.setProperty('color', 'green');
            }
            break;
        case "dark":
            document.body.style.setProperty('background-color', 'black');
            document.getElementById("topbar").className = "navbar fixed-top bg-secondary";
            document.getElementById("footbar").className = "navbar fixed-bottom bg-secondary";
            var collection = document.getElementsByClassName("container-fluid");
            for (let i = 0; i < collection.length; i++) {
                collection[i].style.setProperty('background-color', 'green');
                collection[i].style.setProperty('color', '#efefef');
            }
            collection = document.getElementsByClassName("noMatches");
            for (let i = 0; i < collection.length; i++) {
                collection[i].style.setProperty('color', '#c5ffc5');
            }
            break;
    }
    return;
}

// Update the music profile
function updateMusicProfile() {
    fetch("/updateMusicProfile");
}

// Show loading animation before data loaded
function showLoadingAnimation(loadingMessage, messageClass) {
    if (document.getElementById("divWheelFrame") != null) {
        return;
    }

    var message = document.createElement("div");
    message.id = "divMessage";
    message.classList.add(messageClass);
    message.innerHTML = loadingMessage;

    var frame = document.createElement("div");
    frame.id = "divWheelFrame";
    frame.classList.add("wheel-frame");
    frame.appendChild(message);

    for (var i = 0; i < 10; i++) {
        var track = document.createElement("div");
        track.classList.add("wheel-track");
        var dot = document.createElement("div");
        dot.classList.add("wheel-dot");
        track.style.transform = "rotate(" + String(i * 40) + "deg)";
        track.appendChild(dot);
        frame.appendChild(track);
    }

    document.body.appendChild(frame);

    var wait = 0;
    var dots = document.getElementsByClassName("wheel-dot");
    for (var i = 0; i < dots.length; i++) {
        window.setTimeout(function(dot) {
            dot.classList.add("wheel-animated");
        }, wait, dots[i]);
        wait += 150;
    }
};

// Get matches that are within your distance 
function getLocationAndMatches(locationUpdateNeeded) {
    if (locationUpdateNeeded == true) {
        if (navigator.geolocation) {
            const loadingFrame = document.querySelector('.wheel-frame')
            loadingFrame.style.backgroundColor = 'black';
            navigator.geolocation.getCurrentPosition(sendLocationToServer, geolocationDenied);
        } else {
            noGeolocation();
        }
    } else {
        fetchMatches();
    }
}

// Get users location and send to the server
function sendLocationToServer(position) {
    console.log("Started running sendLocationToServer()");
    const data = new URLSearchParams();
    const coordinates = {lat: position.coords.latitude, long: position.coords.longitude};

    data.append("userID", {{userID}});
    data.append("lat", coordinates.lat);
    data.append("long", coordinates.long);

    fetch('matches/location', {
        method: 'POST',
        headers: {
            'Content-type': 'application/x-www-form-urlencoded'
        },
        body: data
    })
        .then(response => response.json())
        .then(data => console.log(data));

    // give the server some time to write the location
    delay(1000).then(() => fetchMatches());
}

function delay(time) {
    return new Promise(resolve => setTimeout(resolve, time));
}

// Fetch data from server
function fetchMatches() {
    fetch("/matches/myresults")
        .then(response => response.json())
        .then(data => {
            if (data.length !== 0) {
                // Sort matches
                data.sort(function(a, b) {
                    return a.match_percentage - b.match_percentage;
                });

                // Display matches
                for (let i = 0; i < data.length; i++) {
                    addMatch(data[i]);
                }
                setTheme("{{ theme }}");
            } else {
                noMatches();
            }
        }).then(() => removeLoading());
}

// hide the loading screen 
function removeLoading() {
    document.body.removeChild(document.getElementById("divWheelFrame"));
    document.body.removeChild(document.getElementById("styleLoading"));
};

// Display when there are no matches for the user
const noMatches = () => {
    const noMatchTemplate = `
        <div class="container-fluid">
            <div class="noMatches">
                <h1>No matches...for now.<br>Keep listening to music on Spotify!</h1>
            </div>
        </div>
    `;

    document.getElementById("matches_container").innerHTML = noMatchTemplate;
    setTheme("{{ theme }}");
}

// When the users location data cannot be obtained
function geolocationDenied(error) {
    var message = "";
    if (error.code == error.PERMISSION_DENIED) {
        message = "<h1>Spotmeet only works if you allow us to use your location! <br><br>Try again by refreshing this page, or changing your browser settings.</h1>";
    }
    else if (error.code == POSITION_UNAVAILABLE) {
        message = "<h1>Unfortunately your location is unable to be seen.<br><br>Please try again later.</h1>";
    } else {
        message = "<h1>Your location request timed out.<br><br>Try again by refreshing this page.</h1>";
    }

    let noGeoTemplate = `
        <div class="container-fluid">
            <div class="noMatches">
                ` + message + `
            </div>
        </div>
    `;

    document.getElementById("matches_container").innerHTML = noGeoTemplate;
    setTheme("{{ theme }}");
    removeLoading();
}

// adding each match element to the page with the users matches
const addMatch = (match) => {
    const matchTemplate = `
       <li id="match_container-${match.match_id}" class="media media-body container-fluid mt-3 list-group-item align-items-center p-2">
           <div id="top_row-${match.match_id}" class="row mb-2 align-items-center" style="display:flex; flex-direction:row;">
               <div style="display:flex; flex-direction:row; justify-content: space-between; align-items: center;">
                   <div>
                       <img src="/public/images/default-profile-pic.png" class="rounded-circle" style="width: 32px;"></img>
                       &nbsp;&nbsp;<span style="font-size:1.2em; font-family: 'Fredoka', sans-serif;">${match.other_user_name}</span>
                   </div>
                   <div class="d-flex">
                    <p class="mb-0 pb-0 me-2" style="height: 100%; padding: auto;">${match.percent_match}% Match</p>
                    <a href="#" onclick="acceptMatch(${match.match_id})" class="btn btn-success thumb-button"><i class="fa-regular fa-thumbs-up"></i></a>
                    <a href="#" onclick="declineMatch(${match.match_id})" class="btn btn-danger thumb-button"><i class="fa-regular fa-thumbs-down"></i></a>
                   </div>
               </div>
               <div class="mt-2">
                   ${match.artist_name} - ${match.song_name}
               </div>
               <div class="col">
                   
               </div>
               <div class="col">
                   
               </div>
           </div>
           <div id="bottom_row-${match.match_id}" class="row">
               
           </div>
       </li>
    `

    const matchContainer = document.getElementById("matches_container");
    matchContainer.innerHTML += matchTemplate;
}

// When the user clicks the accept match button
const acceptMatch = (matchID) => {
    fetch("/matches/accept/" + matchID)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById("match_container-" + matchID).remove();
            }
        });
}


// When the user clicks the decline match button
const declineMatch = (matchID) => {
    fetch("/matches/reject/" + matchID)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById("match_container-" + matchID).remove();
            }
        });
}

</script>
{{end}}