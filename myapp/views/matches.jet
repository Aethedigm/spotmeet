{{extends "./layouts/base.jet"}}

{{block browserTitle()}}Matches{{end}}

{{block css()}}

{{end}}

{{block pageContent()}}
<div id="navbar" class="navbar fixed-top mb-5">
    <div class="container-fluid">
        <div></div>
        <a href="/users/profile" class="btn btn-primary float-right rounded-pill">View Profile</a>
    </div>
</div>

<div id="matches_container" class="mt-5">
</div>

<div id="footbar" class="navbar fixed-bottom bg-light">
    <div class="container-fluid">
        <a href="/messages" class="btn float-left rounded-pill w-25">Message</a>
        <a href="#" class="btn btn-primary w-25">Match</a>
        <a href="/settings" class="btn float-right rounded-pill w-25">Settings</a>
    </div>
</div>
{{end}}

{{block js()}}
<script>

window.onload = function() {
    showLoadingAnimation();
    getLocationAndMatches();
}

const noMatches = () => {
    const noMatchTemplate = `
        <div class="container">
            <div class="row">
                <div class="col-12 text-center">
                    <h1>No Matches</h1>
                </div>
            </div>
        </div>
    `;

    document.getElementById("matches_container").innerHTML = noMatchTemplate;
}

const addMatch = (match) => {
    const matchTemplate = `
    <div id="match_container-${match.ID}" class="container-fluid mt-3">
        <div id="top_row-${match.ID}" class="row mb-2">
            <div class="col-3">
                <i class="fa-solid fa-user fa-2xl"></i>
            </div>
            <div class="col-4 mt-2">
                ${match.percent_match}% Match
            </div>
            <div class="col-5  mt-2">
                ${match.artist_id}
            </div>
        </div>
        <div id="bottom_row-${match.ID}" class="row">
            <div class="col">
                <a href="#" onclick="acceptMatch(${match.ID})" class="btn btn-success rounded w-100">Link</a>
            </div>
            <div class="col">
                <a href="#" onclick="declineMatch(${match.ID})" class="btn btn-danger rounded w-100">Pass</a>
            </div>
        </div>
    </div>
    `

    const matchContainer = document.getElementById("matches_container");
    matchContainer.innerHTML += matchTemplate;
}

const acceptMatch = (matchID) => {
    fetch("/matches/accept/" + matchID)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById("match_container-" + matchID).remove();
            }
        });
}

const declineMatch = (matchID) => {
    fetch("/matches/reject/" + matchID)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById("match_container-" + matchID).remove();
            }
        });
}

function getLocationAndMatches() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(sendLocationToServer)
    }
}

async function sendLocationToServer(position) {
    const data = new URLSearchParams();
    const coordinates = {lat: position.coords.latitude, long: position.coords.longitude};

    data.append("userID", {{userID}});
    data.append("lat", coordinates.lat);
    data.append("long", coordinates.long);

    fetch('matches/location', {
        method: 'POST',
        headers: {
            'Content-type': 'application/x-www-form-urlencoded'
        },
        body: data
     })
        .then(response => response.json())
        .then(data => console.log(data))
        .then(fetchMatches())
        .then(removeLoading());
}

// Fetch data from server
async function fetchMatches() {
    fetch("/matches/myresults")
        .then(response => response.json())
        .then(data => {
            if (data.length !== 0) {
                // Sort matches
                data.sort(function(a, b) {
                    return a.match_percentage - b.match_percentage;
                });

                // Display matches
                for (let i = 0; i < data.length; i++) {
                    addMatch(data[i]);
                }
            } else {
                noMatches();
            }
        });
}

function showLoadingAnimation() {
    if (document.getElementById("divWheelFrame") != null) {
        return;
    }
    var style = document.createElement("style");
    style.id = "styleLoading";
    style.innerHTML = `
        .message {
            font-size: 4em;
            color: white;
            text-align: center;
        }
        .wheel-frame {
            position: fixed;
            background-color: #4285F4;
            left: 0;
            top: 0;
            right: 0;
            bottom: 0;
            z-index: 4;
        }
        .wheel-track {
            height: 100px;
            display: inline-block;
            position: absolute;
            top: calc(50% - 50px);
            left: 50%;
        }
        .wheel-dot {
            height: 15px;
            width: 15px;
            background-color: white;
            border-radius: 100%;
        }
        .wheel-animated {
            animation-name: wheel-animated;
            animation-direction: alternate;
            animation-duration: .50s;
            animation-iteration-count: infinite;
            animation-timing-function: ease-in-out;
        }
        @keyframes wheel-animated {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }
    `
    document.body.appendChild(style);

    var message = document.createElement("div");
    message.id = "divMessage";
    message.classList.add("message");
    message.innerHTML = `Loading your matches...`

    var frame = document.createElement("div");
    frame.id = "divWheelFrame";
    frame.classList.add("wheel-frame");

    for (var i = 0; i < 10; i++) {
        var track = document.createElement("div");
        track.classList.add("wheel-track");
        var dot = document.createElement("div");
        dot.classList.add("wheel-dot");
        track.style.transform = "rotate(" + String(i * 40) + "deg)";
        track.appendChild(dot);
        frame.appendChild(track);
    }

    document.body.appendChild(frame);
    document.body.appendChild(message);

    var wait = 0;
    var dots = document.getElementsByClassName("wheel-dot");
    for (var i = 0; i < dots.length; i++) {
        window.setTimeout(function(dot) {
            dot.classList.add("wheel-animated");
        }, wait, dots[i]);
        wait += 200;
    }
};

async function removeLoading() {
  document.body.removeChild(document.getElementById("divWheelFrame"));
  document.body.removeChild(document.getElementById("styleLoading"));
};

</script>
{{end}}