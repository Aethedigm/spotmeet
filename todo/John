I'm putting my plans here so everyone can see what I'm planning to do or what I'm already working on. They are in no
particular order.


x add thread_id (FK) to matches model
x add messages table (id, match_id (fk), user_id (FK), created_at, sent_at)

x write a function that returns a slice of all liked_artists of a single user

x write function that adds artist to database if not already there. Use this when importing listened-to songs from
user's spotify - I just modified artist.Insert() to block the insert if the artist already exists in the database

x add expiry to liked_artists table, so each entry will be auto-deleted a month from being created (people's musical
tastes change over time)

x add "linked" field to matches table as type bool
    false by default
    this should turn true the moment both users of a match have sent a message to the other
    "linked" means the expiry timestamp should be removed (or ignored)
        the match can now only be removed if one of the users selects "remove match" from the message page

x add match_sensitivity field to settings
    this represents an integer from 1 to 100
    This will be the minimum value of potential matches' liked_artists' liked_levels that the app will move forward
     with as a match.
x add liked_artist_sensitivity field to settings (integer 1 - 100, representing percentage)
    this will control how sensitive the app is in saving artists a user has listened to as actual liked_artists. Without
    this, for every user the app would save every single listened-to artist as a liked_artist. For the moment, I'd like
    to hide this from the user, and just set every user's liked_artist_sensitivity to a default of 5, or, 5%. This way,
    when SpotMeet pulls in all songs the user has listened to in the past month (each time they log in), it can filter
    out the listened-to artists whose songs accounted for less than 5% of the total songs listened to by the user in the
    past month.


- write function that runs periodically to take care of cleaning up records in databases that have an expiry

- write function that deletes an artist, if it's only linked liked_artist is finally expired


------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

- Upon authenticating each user, every time they log in, or are auto-authenticated because the app (really, the browser)
saves their credentials, do these things---------

	1). Access spotify to get user's spotify information
	    grab every song they played in the last month that was considered a "full-play" (I believe Spotify marks songs
	        as these, if they play 30 seconds or more of the song.
		get all artists from those songs, make a new map called LikedArtists, and save the artist names next to the
		    number of fully-played songs by each artist. Next to that in the map, also put the percentage (as whole
		    number 1 to 100) of all songs in this map that this artist accounts for (this will be the liked_level for
		    the liked_artist)
		build logic that picks the strongest artists for the user, from the map you just made:
			- add all artists from the LikedArtists map into artists table, if not already there
			- create liked_artist table entries for the user (if not already in the liked_artists table) for each
			    entry in the LikedArtists map you just created, if the liked_level part of the map entry is AT or ABOVE
			    the user's liked_artist_sensitivity value (1-100) from their settings.

    2.) - Get user's geolocation
            do this by adding current_latitude and current_longitude integer fields to Users table
            these fields will update upon each login/opening of the app (browser)
                client's IP address will be ran through a geolocation tool
                    longitude and latitude will be acquired, and applied to the user's record in the users table

    3.) - Update matches table upon every user login or opening of the app (website)
            ( -------------------- This Is How Matches Are Created -------------------- )
            - first, compare the given user's looking_for value (from their settings table record) will all other users
                - within the procedure, save user ids of all users with identical looking_for values
            - if any matches:
            - then, get the value of the given user's distance field from the settings table
                  (this is the max radius of the search we will conduct)
                - compare the given user's location data (stored in users table) against all users saved from last step
                - within the procedure, save user ids of users with locations that are within the radius we got from
                    the settings table

            - if any user ids left, then: (the fun part) --------------------------

            - create a map called NewMatches

            - for EACH remaining user id (we're talking about the users that are being checked against our given user)
                - check to see if our given user shares any artists within their liked_artists in common with the
                currently iterated user's. Save in a two-dimensional array, the matching liked_artists
                (they share the same artist ids)

                - if our two-dimensional array is not empty:

                - then for EACH pairing in that array,

                    - with our current user's match_sensitivity value in hand (from their settings),
                    check to see if the shared liked_artist FROM THE OTHER USER has a liked_level (1-100)
                    that is AT or ABOVE our current user's match_sensitivity setting.
                        - if this is true, perform the same task from the other user's perspective
                            - if that passes, then:
                                find the average between the given user's liked_artist's liked_level, and the other
                                    user's liked_level for that liked_artist they share in common.
                                        - within this procedure (and still for this one other user we are checking
                                        against) save in a map, the artist next to the average liked_level we just found

                - REPEAT

                - Now that that map has been filled with all artists (and the corresponding average liked_levels)
                the user shares with the current other user (and liked_levels satisfy each other's individual
                match_sensitivitys), from within that map, return the artist with the highest value associated
                with it, along with that value.
                - Append the artist and its corresponding value (the "percentage matched on"), and the user id of the
                other user, to our NewMatches map (these are our Matches for our given user!!!).

            - REPEAT this for each block

            - If our NewMatches map is not empty, we can run this map through a procedure that calls Match.Insert() for
            each record in our map, IF, purely based on ID-pairing, that match does not exist. (Matches should expire
            after a few days, if the linked field in a match is not set to true.)

                        (this algorithm is very basic and can be expanded upon in the future)

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
